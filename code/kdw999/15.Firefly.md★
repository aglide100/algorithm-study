# 백준 3020번 문제

> 출처: https://www.acmicpc.net/problem/3020

## 문제 설명
개똥벌레 한 마리가 장애물(석순과 종유석)로 가득찬 동굴에 들어갔다. 동굴의 길이는 N미터이고, 높이는 H미터이다. 

(N은 짝수) 첫 번째 장애물은 항상 석순이고, 그 다음에는 종유석과 석순이 번갈아가면서 등장한다.

아래 그림은 길이가 14미터이고 높이가 5미터인 동굴이다. 

이 개똥벌레는 장애물을 피하지 않는다. 자신이 지나갈 구간을 정한 다음 일직선으로 지나가면서 만나는 모든 장애물을 파괴한다.

위의 그림에서 4번째 구간으로 개똥벌레가 날아간다면 파괴해야하는 장애물의 수는 총 여덟개이다. 

(4번째 구간은 길이가 3인 석순과 길이가 4인 석순의 중간지점을 말한다)

하지만, 첫 번째 구간이나 다섯 번째 구간으로 날아간다면 개똥벌레는 장애물 일곱개만 파괴하면 된다.

동굴의 크기와 높이, 모든 장애물의 크기가 주어진다. 

이때, 개똥벌레가 파괴해야하는 장애물의 최솟값과 그러한 구간이 총 몇 개 있는지 구하는 프로그램을 작성하시오.

첫째 줄에 N과 H가 주어진다. N은 항상 짝수이다. (2 ≤ N ≤ 200,000, 2 ≤ H ≤ 500,000)

다음 N개 줄에는 장애물의 크기가 순서대로 주어진다. 장애물의 크기는 H보다 작은 양수이다.

첫째 줄에 개똥벌레가 파괴해야 하는 장애물의 최솟값과 그러한 구간의 수를 공백으로 구분하여 출력한다.

## 예제 입력
6 7

1

5

3

3

5

1

## 예제 출력
2  3


## 문제 접근

장애물들을 배열로 지정 후 이진탐색을 활용하여 최소 충돌 지점을 구간별로 확인한다.

## 문제 풀이 코드
```java

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Firefly {

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," "); // 길이와 높이 입력 후 한 문자로 구분
        
        int n = Integer.parseInt(st.nextToken());  // 길이(첫 번째 문자 삽입)
        int h = Integer.parseInt(st.nextToken()); // 높이(두 번째 문자 삽입)

        int down[] = new int[n/2]; // 석순 갯수 배열
        int up[] = new int[n/2]; // 종유석 갯수 배열
        
        for(int i=0; i<n/2; i++) {
        	int a = Integer.parseInt(br.readLine());
        	int b = Integer.parseInt(br.readLine());
        	down[i] = a; // 장애물의 첫 시작은 석순, a는 석순 길이 삽입
        	up[i] = b; // b는 종유석 길이 삽입
        }
        
    Arrays.sort(up);  // 이진탐색을 위한 정렬
		Arrays.sort(down);
		
		int min = n; // 최소 충돌 횟수
		int count = 0; 
		
		for(int i=1; i<h+1; i++) { // i는 구간
			int conflict = binarySearch(0, n/2, i, down) + binarySearch(0, n/2, h-i+1, up);
			// 충돌 계산
			
			if(min == conflict) {
				count ++;
				continue;
			}
			
			if(min > conflict) {
				min = conflict;
				count =1;
			}
		}
		System.out.println(min +" "+count);
	}
	static int binarySearch(int left, int right, int h, int arr[]) {
		while(left<right) {
			int mid = (left+right)/2;
			
			if(arr[mid] >= h) {
				right = mid;
			}
			else {
				left = mid+1;
			}
		}
		return arr.length-right;
	}
}
